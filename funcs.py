# функции:
def y(x) -> float:
    """
    Оригинальная функция
    :param x: Входное значение (точка на отрезке)
    :return:
    """
    return (x + 7) / (6 * (x*x + 2*x + 7)**(1/2)) #(x + 7)/(6*sqrt(x^(2)+2x+7))

def a_y1(x) -> float:
    """
    Аналитическое решение первой производной
    :param x: Входное значение (точка на отрезке)
    :return:
    """
    return - (x / ((x*x + 2*x + 7)**(3/2))) # -((x*((x*x) + 2*x + 7)**(1/2)) / ((x**4)+4*(x**3)+18*(x*x)+28*x+43))

def a_y2(x) -> float:
    """
    Аналитическое решение второй производной
    :param x: Входное значение (точка на отрезке)
    :return:
    """
    return (2*(x**2) + x - 7) / ((x**2 + 2*x + 7)**(5/2))

def a_y3(x) -> float:
    """
    Аналитическое решение третьей производной
    :param x: Входное значение (точка на отрезке)
    :return:
    """
    return - ((6*(x**3 + x**2 - 10*x - 7)) / ((x**2 + 2*x + 7)**(7/2)))

# производные
def f1(x, h) -> float:
    """
    Решение первой производной
    :param x: Входное значение (точка на отрезке)
    :param h: Размер разбиения (чем меньше - тем выше точность)
    :return:
    """
    return (y(x+h) - y(x))/h

def f1_v2(x, h) -> float:
    """
    Решение первой производной второго порядка точности
    :param x: Входное значение (точка на отрезке)
    :param h: Размер разбиения (чем меньше - тем выше точность)
    :return:
    """
    return (y(x+h) - y(x-h))/(2*h)

def f2(x, h) -> float:
    """
    Решение второй производной
    :param x: Входное значение (точка на отрезке)
    :param h: Размер разбиения (чем меньше - тем выше точность)
    :return:
    """
    return (y(x+h) - 2*y(x) + y(x-h))/(h*h)

def f3(x, h) -> float:
    """
    Решение третьей производной
    :param x: Входное значение (точка на отрезке)
    :param h: Размер разбиения (чем меньше - тем выше точность)
    :return:
    """
    return (y(x+2*h) - 2*y(x+h) + 2*y(x-h) - y(x-2*h))/(2*(h**3))